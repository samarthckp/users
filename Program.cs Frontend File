using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;
using MudBlazor.Services;
using MudBlazor;
using Microsoft.AspNetCore.Components.Authorization;
using Serilog;
using UI_ERP.Reusable;
using Microsoft.AspNetCore.Authentication.Cookies;
using OfficeOpenXml;
//using UI_ERP.Reusable;


var builder = WebApplication.CreateBuilder(args);

Log.Logger = new LoggerConfiguration()
           .WriteTo.File("Logs/ui-log-.txt", rollingInterval: RollingInterval.Day)
           .CreateLogger();


builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri($"{Variable.API_URL}") });

// Add services to the container.
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor().AddHubOptions(opt => opt.MaximumReceiveMessageSize = null);
builder.Services.AddMudServices(config =>
{
    config.SnackbarConfiguration.PositionClass = Defaults.Classes.Position.BottomCenter;
    config.SnackbarConfiguration.VisibleStateDuration = 10000;

});
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri("http://localhost:5271") });
builder.Services.AddScoped<AuthenticationServices>();
//builder.Services.AddScoped<UserRightsService>();



builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =>
    {
        options.Cookie.Name = "YourApp.Cookie";
        options.ExpireTimeSpan = TimeSpan.FromHours(12); // Set the session timeout to 12 hours
        options.SlidingExpiration = true; // Extend the session lifetime on each request
    });


builder.Logging.AddSerilog();
builder.Services.AddHttpClient(); // Register HttpClient here



ExcelPackage.LicenseContext = LicenseContext.Commercial;//Set the ExcelPackage.LicenseContext property

builder.Services.AddHttpContextAccessor();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

// Use authentication and authorization
app.UseAuthentication();
app.UseAuthorization();

app.UseHttpsRedirection();

app.UseStaticFiles();

app.UseRouting();

app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

app.Run();

