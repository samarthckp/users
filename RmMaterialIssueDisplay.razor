@page "/AddMaterialIssue"
@using System.Net.Http
@using System.Net.Http.Json
@using ERP_API.Moduls
@using MudBlazor
@using MudBlazor.Components
@using UI_ERP.Reusable
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="container" id="container" style="background-color: #f0f0f0;">
    <div class="row rounded m-1">

        <div class="col-md-5">
            <h5>RmMaterialIssue Details</h5>
        </div>
        <div class="col-md-4">
            <MudTextField @bind-Value="SearchValue" Placeholder="Search" Clearable="true" Adornment="Adornment.Start" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true"></MudTextField>
        </div>

        @* <div class="col-md-4"></div> *@
        <div class="col-md-3 d-flex justify-content-end">
            <MudTooltip Text="Add Material Issue">
                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary" Style="padding: 0px;" OnClick="OpenCreateDialog" />
            </MudTooltip>
        </div>
    </div>

    <MudTable Items="RmMaterials" Hover="true" SortLabel="Sort By" Striped="true" RowsPerPage="50" Height="513px" Breakpoint="Breakpoint.Sm" Virtualize="true" FixedHeader="true" Dense="true"
              CustomHeader="true" CustomFooter="true" Bordered="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" Class="displayTable">
        <HeaderContent>
            <MudTh>SL NO</MudTh>
            <MudTh>Issue Number</MudTh>
            <MudTh>Issue Date</MudTh>
            <MudTh>From Store</MudTh>
            <MudTh>To Store </MudTh>

            <MudTh>
                <div style="display: flex; justify-content: flex-end; gap: 12px;">
                    <span>View</span>
                    <span>Edit</span>
                    <span>Delete</span>
                </div>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd style="max-width: 100px;">@(RmMaterials.IndexOf(context) + 1)</MudTd>
            <MudTd>@context.IssNo</MudTd>
            <MudTd>@($"{context.DateOfIssue:yyyy-MM-dd}")</MudTd>
            <MudTh>@context.FromStore </MudTh>
            <MudTh>@context.ToStore </MudTh>
           
            <MudTd style="text-align: right;">
                <div style="display: flex; justify-content: flex-end; gap: 12px;">
                    <MudIconButton Icon="@Icons.Material.Outlined.Visibility" Size="Size.Small" Variant="Variant.Filled" Color="Color.Tertiary" OnClick="@(async () => await OpenDialogForView(context.matIssueId))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await OpenDialogForEdit(context.matIssueId))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="Size.Small" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => DeleteMaterialIssue(context.matIssueId))" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    private RmmaterialissueCreateOnly Rmmaterialissue = new RmmaterialissueCreateOnly();
    private List<RmmaterialissueReadOnly> RmMaterials { get; set; } = new List<RmmaterialissueReadOnly>();


    private List<ItemReadOnlyDto> Items { get; set; } = new List<ItemReadOnlyDto>();

    
    private List<StoreReadOnlyDto> Stores { get; set; } = new List<StoreReadOnlyDto>();


    private List<UomReadOnlyDto> UOMs { get; set; } = new List<UomReadOnlyDto>();
    private List<RmmaterialissueSubReadOnly> RmmaterialissueSub { get; set; } = new List<RmmaterialissueSubReadOnly>();
    private bool DialogVisible { get; set; } = false;
    private bool isViewMode { get; set; } = true;
    private string SearchValue { get; set; } = string.Empty;


   
    private DialogOptions FullScreenDialogOptions = new DialogOptions
        {
            FullScreen = true,
            CloseButton = true
        };
    protected override async Task OnInitializedAsync()
    {
        try
        {

            RmMaterials = await HttpClient.GetFromJsonAsync<List<RmmaterialissueReadOnly>>($"{Variable.API_URL}/api/Rmmaterialissues");

            RmMaterials = RmMaterials.OrderByDescending(po => po.matIssueId).ToList();


            Items = await HttpClient.GetFromJsonAsync<List<ItemReadOnlyDto>>($"{Variable.API_URL}/api/Items");
            Stores = await HttpClient.GetFromJsonAsync<List<StoreReadOnlyDto>>($"{Variable.API_URL}/api/Stores");
        
            UOMs = await HttpClient.GetFromJsonAsync<List<UomReadOnlyDto>>($"{Variable.API_URL}/api/UnitOfMeasurements");
           

         

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching data: {ex.Message}", Severity.Error);
        }
    }




    private async Task OpenCreateDialog()
    {
        Rmmaterialissue = new RmmaterialissueCreateOnly();
        RmmaterialissueSub = new List<RmmaterialissueSubReadOnly>();
        isViewMode = false;
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["Rmmaterialissue"] = Rmmaterialissue,
                ["isViewMode"] = isViewMode,


                ["Stores"] = Stores,
               
                ["Items"] = Items,

                ["UOMs"] = UOMs,
                ["RmmaterialissueSub"] = RmmaterialissueSub,

            };
        var dialog = DialogService.Show<RmMaterialIssueDialog>("Create Material Issue", dialogParameters, FullScreenDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await AddMaterialIssue();
        }
    }

    private async Task AddMaterialIssue()
    {
        try
        {
            Rmmaterialissue.RmmaterialissueSubs = RmmaterialissueSub;


            Console.WriteLine($"Sending Material Issue: {System.Text.Json.JsonSerializer.Serialize(Rmmaterialissue)}");

            var response = await HttpClient.PostAsJsonAsync($"{Variable.API_URL}/api/Rmmaterialissues", Rmmaterialissue);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Material Issue saved successfully", Severity.Success);
                DialogVisible = false;
                await ReloadMaterialIssues();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error response: {errorMessage}");
                Snackbar.Add($"Failed to save Material Issue : {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in AddPmInwardMaterial: {ex}");
            Snackbar.Add($"An error occurred while saving PmInward Material: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenDialogForView(int id)
    {
        isViewMode = true;
        await LoadMaterialIssueData(id);
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["Rmmaterialissue"] = Rmmaterialissue,
                ["isViewMode"] = isViewMode,
          
                ["Stores"] = Stores,
                ["Items"] = Items,
               
                ["UOMs"] = UOMs,
                ["RmmaterialissueSub"] = RmmaterialissueSub,


            };
        var dialog = DialogService.Show<RmMaterialIssueDialog>("View Material Issue", dialogParameters, FullScreenDialogOptions);
        await dialog.Result;
    }

    private async Task OpenDialogForEdit(int id)
    {
        isViewMode = false;
        await LoadMaterialIssueData(id);
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["Rmmaterialissue"] = Rmmaterialissue,
                ["isViewMode"] = isViewMode,
              
                ["Stores"] = Stores,

                ["Items"] = Items,
                ["UOMs"] = UOMs,
                ["RmmaterialissueSub"] = RmmaterialissueSub,
            };
        var dialog = DialogService.Show<RmMaterialIssueDialog>("Edit Material Issue", dialogParameters, FullScreenDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await UpdateMaterialIssue();
        }
    }

    private async Task UpdateMaterialIssue()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"{Variable.API_URL}/api/Rmmaterialissues/{Rmmaterialissue.matIssueId}", Rmmaterialissue);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Material Issue updated successfully", Severity.Success);
                DialogVisible = false;
                await ReloadMaterialIssues();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update Material Issue: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while updating Material Issue: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadMaterialIssueData(int id)
    {
        try
        {
            var materialDto = await HttpClient.GetFromJsonAsync<RmmaterialissueCreateOnly>($"{Variable.API_URL}/api/Rmmaterialissues/{id}");
            if (materialDto != null)
            {
                Rmmaterialissue = materialDto;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        try
        {
            var materialDto = await HttpClient.GetFromJsonAsync<RmmaterialissueCreateOnly>($"{Variable.API_URL}/api/Rmmaterialissues/{id}");
            if (materialDto != null)
            {
                Rmmaterialissue = materialDto;

                if (materialDto.RmmaterialissueSubs != null && materialDto.RmmaterialissueSubs.Any())
                {
                    RmmaterialissueSub = materialDto.RmmaterialissueSubs.Where(item => item.matIssueId == id).ToList();
                }
                else
                {
                    RmmaterialissueSub = new List<RmmaterialissueSubReadOnly>();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteMaterialIssue(int id)
    {
        try
        {
            bool? confirmDelete = await DialogService.ShowMessageBox(
                "Confirm Delete",
                "Are you sure you want to delete this Material Issue?",
                yesText: "Delete",
                cancelText: "Cancel"
            );

            if (confirmDelete == true)
            {
                var response = await HttpClient.DeleteAsync($"{Variable.API_URL}/api/Rmmaterialissues/{id}");

                if (response.IsSuccessStatusCode)
                {
                    RmMaterials.RemoveAll(b => b.matIssueId == id);

                    await DialogService.ShowMessageBox(
                        "Success",
                        "Material Issue deleted successfully.",
                        yesText: "OK"
                    );
                    await ReloadMaterialIssues();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await DialogService.ShowMessageBox(
                        "Error",
                        $"Failed to delete Material Issue: {errorMessage}",
                        yesText: "OK"
                    );
                }
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox(
                "Error",
                $"An error occurred while deleting Material Issue: {ex.Message}",
                yesText: "OK"
            );
        }
    }

    private async Task ReloadMaterialIssues()
    {
        RmMaterials = await HttpClient.GetFromJsonAsync<List<RmmaterialissueReadOnly>>($"{Variable.API_URL}/api/Rmmaterialissues");
        StateHasChanged();
    }
}

<style>
    label {
        font-size: 1rem;
    }

    #container {
        padding: 15px;
        margin: 0px;
        max-width: 100%;
    }
</style>
