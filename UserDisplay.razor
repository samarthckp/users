 @page "/AddUser"
@using System.Net.Http
@using System.Net.Http.Json
@using ERP_API.Moduls
@using MudBlazor
@using UI_ERP.Reusable
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="container" id="container" style="background-color: #f0f0f0;">
    <div class="row rounded m-1">
        <div class="col-md-5" style="padding: 0;">
            <h5>User Details</h5>
        </div>
        <div class="col-md-4">
            <MudTextField @bind-Value="SearchValue" Placeholder="Search" Clearable="true" Adornment="Adornment.Start" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true"></MudTextField>
        </div>
        <div class="col-md-3 d-flex justify-content-end">
            <MudTooltip Text="Add User">
                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary" Style="padding: 0px;" OnClick="OpenCreateDialog" />
            </MudTooltip>
        </div>
    </div>

    <MudTable Items="FilteredUsers" Hover="true" SortLabel="Sort By" RowsPerPage="25" Height="513px" Breakpoint="Breakpoint.Sm" Virtualize="true" FixedHeader="true" Dense="true" Striped="true" Bordered="true" Class="displayTable">
        <HeaderContent>
            <MudTh style="width:120px;padding: 3px;font-size: 14px;font-weight: 600;">SL NO</MudTh>
            <MudTh style="width:1000px;padding:3px;font-size: 14px;font-weight: 600;">User Name</MudTh>
            <MudTh>
                <div style="display: flex; justify-content: flex-end; gap: 9px;">
                    <span Style="font-size: 14px;font-weight: 600;">View</span>
                    <span Style="font-size: 14px;font-weight: 600;">Edit</span>
                    <span Style="font-size: 14px;font-weight: 600;">Delete</span>
                </div>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@(users.IndexOf(context) + 1)</MudTd>
            <MudTd>@context.UserName</MudTd>
             @* <MudTd>@GetEmployeeName(context.EmployeeId)</MudTd> *@
            @* <MudTd>@GetEmployeeLastName(context.EmployeeId)</MudTd>  *@
            <MudTd style="text-align: right;">
                <div style="display: flex; justify-content: flex-end; gap: 12px;">
                    <MudIconButton Icon="@Icons.Material.Outlined.Visibility" Size="Size.Small" Variant="Variant.Filled" Color="Color.Tertiary" OnClick="@(async () => await OpenDialogForView(context.UserId))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await OpenDialogForEdit(context.UserId))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="Size.Small" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => DeleteUsers(context.UserId))" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

</div>

@code {
    private UserCreateDto user = new UserCreateDto();
    private List<UserReadOnlyDto> users { get; set; } = new List<UserReadOnlyDto>();
    // private List<EmployeeReadOnlyDto> employee { get; set; } = new List<EmployeeReadOnlyDto>();
    private string SearchValue { get; set; } = string.Empty;
    private UserCreateDto User = new UserCreateDto();
    private bool DialogVisible { get; set; } = false;
    private bool isViewMode { get; set; } = true;
    private bool isEditMode { get; set; } = false;
    private bool IsLoading = true;
    private string? Error = null;


    private DialogOptions _maxWidthDialogOptions = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };

    private IEnumerable<UserReadOnlyDto> FilteredUsers =>
      users?.Where(user =>
          string.IsNullOrWhiteSpace(SearchValue) ||
          (user.UserName?.Contains(SearchValue, StringComparison.OrdinalIgnoreCase) ?? false) ||
          (user.UserId.ToString().Contains(SearchValue, StringComparison.OrdinalIgnoreCase))
      ) ?? Enumerable.Empty<UserReadOnlyDto>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await HttpClient.GetFromJsonAsync<List<UserReadOnlyDto>>($"{Variable.API_URL}/api/users");
            users = users.OrderByDescending(co => co.UserId).ToList();
            IsLoading = false;
        }
        catch (Exception ex)
        {
            Error = $"Error fetching data: {ex.Message}";
            IsLoading = false;
        }
    }

    // private string GetEmployeeName(int? EmployeeId)
    // {
    //     var Employee = employee.FirstOrDefault(v => v.Id == EmployeeId);
    //     return Employee != null ? Employee.FirstName : "-";
    // }
    // private string GetEmployeeLastName(int? EmployeeId)
    // {
    //     var Employee = employee.FirstOrDefault(v => v.Id == EmployeeId);
    //     return Employee != null ? Employee.LastName : "-";
    // }

    private async Task OpenCreateDialog()
    {
        user = new UserCreateDto();
        isViewMode = false;
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["user"] = user,
                ["isViewMode"] = isViewMode
            };
        var dialog = DialogService.Show<UserDialog>("Create user", dialogParameters, _maxWidthDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await AddUser();
        }
    }

    private async Task AddUser()
    {
        try
        {
            bool? confirmAdd = await DialogService.ShowMessageBox(
                "Confirm Add",
                "Are you sure you want to save this User?",
                yesText: "Add",
                cancelText: "Cancel"
            );

            if (confirmAdd == true)
            {
                HttpResponseMessage response = await HttpClient.PostAsJsonAsync($"{Variable.API_URL}/api/users", user);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("user successfully", Severity.Success);
                    await ReloadUsers();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    // Log the detailed error message here for further inspection
                    Console.WriteLine($"Error details: {errorMessage}");
                    await DialogService.ShowMessageBox("Error", $"Failed to add user: {errorMessage}", yesText: "OK");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            await DialogService.ShowMessageBox("Error", $"An error occurred while adding user: {ex.Message}", yesText: "OK");
        }
    }

    private async Task OpenDialogForView(int id)
    {
        try
        {
            isViewMode = true;
            await LoadUserData(id);
            DialogVisible = true;

            var dialogParameters = new DialogParameters
                {
                    ["user"] = user,
                    ["isViewMode"] = isViewMode
                };
            var dialog = DialogService.Show<UserDialog>("View user", dialogParameters, _maxWidthDialogOptions);
            await dialog.Result;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenDialogForEdit(int id)
    {
        isViewMode = false;
        isEditMode = true;
        await LoadUserData(id);
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["user"] = user,
                ["isViewMode"] = isViewMode
            };
        var dialog = DialogService.Show<UserDialog>("Edit User", dialogParameters, _maxWidthDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await UpdateUsers();
        }
        else
        {
            isEditMode = false;
        }
    }

    private async Task UpdateUsers()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"{Variable.API_URL}/api/users/{user.UserId}", user);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("User updated successfully", Severity.Success);
                DialogVisible = false;
                isEditMode = false;
                await ReloadUsers();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update User: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while updating User: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadUserData(int id)
    {
        try
        {
            var UserDto = await HttpClient.GetFromJsonAsync<UserReadOnlyDto>($"{Variable.API_URL}/api/users/{id}");
            if (UserDto != null)
            {
                user.UserId = UserDto.UserId;
                user.UserName = UserDto.UserName;
                user.CompanyId = UserDto.CompanyId;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteUsers(int id)
    {
        try
        {
            bool? confirmDelete = await DialogService.ShowMessageBox(
                "Confirm Delete",
                "Are you sure you want to delete this User?",
                yesText: "Delete",
                cancelText: "Cancel"
            );

            if (confirmDelete == true)
            {
                var response = await HttpClient.DeleteAsync($"{Variable.API_URL}/api/users/{id}");

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("User deleted successfully", Severity.Success);
                    await ReloadUsers();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Failed to delete User: {errorMessage}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while deleting User: {ex.Message}", Severity.Error);
        }
    }

    private async Task ReloadUsers()
    {
        users = await HttpClient.GetFromJsonAsync<List<UserReadOnlyDto>>($"{Variable.API_URL}/api/users");
        users = users.OrderByDescending(co => co.UserId).ToList();
    }

}


<style>
    .mud-table-cell {
        border-color: black !important;
    }


    .mud-table-root .mud-table-head .mud-table-cell {
        border: 1px solid black;
    }
</style>
 