@using UI_ERP.Reusable
@inherits LayoutComponentBase
@inject AuthenticationServices AuthService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
@* <MudPopoverProvider/> *@

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h6" Class="ml-3">eTrans ERP</MudText>
        <MudSpacer />
        @if (AuthService.IsLoggedIn)
        {
            
            <MudButton Variant="Variant.Outlined" Color="Color.Inherit" OnClick="OnLogoutClick">
                <MudIcon Icon="@Icons.Material.Filled.Logout" />
                Logout
            </MudButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Elevation="1" Class="mud-theme-primary">
        @if (AuthService.IsLoggedIn)
        {
            <NavMenu />
        }
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>


@code {
    private bool _drawerOpen = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1); // Delay for one millisecond to ensure all child components are rendered
            if (!AuthService.IsLoggedIn)
            {
                Navigation.NavigateTo("/login");
            }
        }
    }

    protected override void OnParametersSet()
    {
        _drawerOpen = AuthService.IsLoggedIn;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    private async Task OnLogoutClick()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to LogOut?",
            yesText: "LogOut",
            cancelText: "Cancel"
        );
        if (result == true)
        {
            // Clear the selected date state

            // Perform logout
            await AuthService.LogoutAsync();

            // Redirect to login page
            Navigation.NavigateTo("/login");
        }
    }

}

<style>
    .mud-elevation-1 {
        box-shadow: var(--mud-elevation-1);
    }

    .mud-theme-primary {
        color: #000 !important;
        background-color: #fff !important;
    }

    .bold-text {
        font-weight: bold;
        font-size: 22px;
        margin-right: 20px;
    }
</style>