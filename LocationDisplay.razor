@page "/AddLocation"
@using System.Net.Http
@using System.Net.Http.Json
@using ERP_API.Moduls
@using MudBlazor
@using UI_ERP.Reusable
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="container" id="container" style="background-color: #f0f0f0;">
    <div class="row rounded m-1">
        <div class="col-md-5" style="padding: 0;">
            <h5>Location Details</h5>
        </div>
        <div class="col-md-4">
            <MudTextField @bind-Value="SearchValue" Placeholder="Search" Adornment="Adornment.Start" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true"></MudTextField>
        </div>
        @*  <div class="col-md-1"></div>  *@
        <div class="col-md-3 d-flex justify-content-end">
            <MudTooltip Text="Add Location">
                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary" Style="padding: 0px;" OnClick="OpenCreateDialog" />
            </MudTooltip>
        </div>
    </div>

    <MudTable Items="FilteredMachines" Hover="true" RowsPerPage="25" SortLabel="Sort By" Striped="true" Height="513px" Breakpoint="Breakpoint.Sm" Virtualize="true" FixedHeader="true" Bordered="true" Dense="true" Class="displayTable">
        <HeaderContent>
            <MudTh Class="slno">SL NO</MudTh>
            <MudTh style="width:400px">Name</MudTh>
            <MudTh>
                <div style="display: flex; justify-content: flex-end; gap: 12px;">
                    <span>View</span>
                    <span>Edit</span>
                    <span>Delete</span>
                </div>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd style="max-width: 100px;">@(Locations.IndexOf(context) + 1)</MudTd>
            <MudTd>@context.Name</MudTd>
            <MudTd style="text-align: right;">
                <div style="display: flex; justify-content: flex-end; gap: 15px;">
                    <MudIconButton Icon="@Icons.Material.Outlined.Visibility" Size="Size.Small" Variant="Variant.Filled" Color="Color.Tertiary" 
                                   OnClick="@(async () => await OpenDialogForView(context.LocationId ?? 0))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="@(async () => await OpenDialogForEdit(context.LocationId ?? 0))" />

                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="Size.Small" Variant="Variant.Filled" Color="Color.Secondary"
                                   OnClick="@(async () => await DeleteMachine(context.LocationId?? 0))" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    private LocationCreateDto location = new LocationCreateDto();
    private List<LocationReadOnlyDto> Locations { get; set; } = new List<LocationReadOnlyDto>();
    private string SearchValue { get; set; } = string.Empty;
    private bool DialogVisible { get; set; } = false;
    private bool isViewMode { get; set; } = true;
    private bool isEditMode { get; set; } = false;

    private DialogOptions _maxWidthDialogOptions = new DialogOptions { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, CloseButton = true };

    private IEnumerable<LocationReadOnlyDto> FilteredMachines =>
        Locations.Where(uom => string.IsNullOrWhiteSpace(SearchValue) ||
                                    uom.Name.Contains(SearchValue, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Locations = await HttpClient.GetFromJsonAsync<List<LocationReadOnlyDto>>($"{Variable.API_URL}/api/Locations");
            // Sort PurchaseOrders to show latest first
            Locations = Locations.OrderByDescending(vo => vo.LocationId).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching data: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenCreateDialog()
    {
        location = new LocationCreateDto();
        isViewMode = false;
        DialogVisible = true;

        var dialogParameters = new DialogParameters { ["location"] = location, ["isViewMode"] = isViewMode};
        var dialog = DialogService.Show<LocationDialog>("Create Location", dialogParameters, _maxWidthDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await AddMachine();
        }
    }

    private async Task AddMachine()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync($"{Variable.API_URL}/api/Locations", location);

            if (response.IsSuccessStatusCode)
            {
                location = new LocationCreateDto();
                Snackbar.Add("location saved successfully", Severity.Success);
                DialogVisible = false;
                await ReloadMachines();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to save location: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while saving location: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenDialogForView(int id)
    {
        isViewMode = true;
        await LoadMachineData(id);
        DialogVisible = true;

        var dialogParameters = new DialogParameters { ["location"] = location, ["isViewMode"] = isViewMode};
        var dialog = DialogService.Show<LocationDialog>("View Location", dialogParameters, _maxWidthDialogOptions);
        await dialog.Result;
    }

    private async Task OpenDialogForEdit(int id)
    {
        isViewMode = false;
        isEditMode = true;
        await LoadMachineData(id);
        DialogVisible = true;

        var dialogParameters = new DialogParameters { ["location"] = location, ["isViewMode"] = isViewMode};
        var dialog = DialogService.Show<LocationDialog>("Edit Location", dialogParameters, _maxWidthDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await UpdateMachine();
        }
        else
        {
            isEditMode = false;
        }
    }

    private async Task UpdateMachine()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"{Variable.API_URL}/api/Locations/{location.LocationId}", location);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Location updated successfully", Severity.Success);
                DialogVisible = false;
                isEditMode = false; // Reset edit mode after successful update
                await ReloadMachines();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update Location: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while updating Location: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadMachineData(int id)
    {
        try
        {
            var machineDto = await HttpClient.GetFromJsonAsync<LocationReadOnlyDto>($"{Variable.API_URL}/api/Locations/{id}");
            if (machineDto != null)
            {
                location.LocationId = machineDto.LocationId;
                location.Name = machineDto.Name;
               
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteMachine(int id)
    {
        try
        {
            bool? confirmDelete = await DialogService.ShowMessageBox(
                "Confirm Delete",
                "Are you sure you want to delete this Location?",
                yesText: "Delete",
                cancelText: "Cancel"
            );

            if (confirmDelete == true)
            {
                var response = await HttpClient.DeleteAsync($"{Variable.API_URL}/api/Locations/{id}");

                if (response.IsSuccessStatusCode)
                {
                    Locations.RemoveAll(b => b.LocationId == id);

                    await DialogService.ShowMessageBox(
                        "Success",
                        "Location deleted successfully.",
                        yesText: "OK"
                    );
                    await ReloadMachines();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await DialogService.ShowMessageBox(
                        "Error",
                        $"Failed to delete location: {errorMessage}",
                        yesText: "OK"
                    );
                }
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox(
                "Error",
                $"An error occurred while deleting the location: {ex.Message}",
                yesText: "OK"
            );
        }
    }

    private async Task ReloadMachines()
    {
        try
        {
            Locations = await HttpClient.GetFromJsonAsync<List<LocationReadOnlyDto>>($"{Variable.API_URL}/api/Locations");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error reloading data: {ex.Message}", Severity.Error);
        }
    }
}

<style>
    label {
        font-size: 1rem;
    }

    #container {
        padding: 15px;
        margin: 0px;
        max-width: 100%;
    }

    .displayTable {
        border: 2px solid blue;
    }

    .mud-table-cell {
        border-color: black !important;
    }

    .mud-table-root .mud-table-head .mud-table-cell {
        border: 1px solid black;
    }

    
</style>
